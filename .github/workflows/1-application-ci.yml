#
# Description: Continuous Integration (CI) workflow for building and pushing the application's Docker image.
#
# Trigger: This workflow runs automatically on a push to the 'application/' directory
#          on any branch, or can be triggered manually.
#
name: CI - Build Application

on:
  push:
    branches:
      - '**'
    paths:
      - 'application/**'
  workflow_dispatch:

# CRITICAL: These values MUST match the outputs from your Terraform apply.
env:
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY: "game-2048-dev"
  ECS_CLUSTER_NAME: "game-2048-cluster-dev"
  ECS_SERVICE_NAME: "game-2048-service-dev"

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS Credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          # The ARN of the IAM role
          role-to-assume: arn:aws:iam::456202167790:role/githubaction
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, Tag, and Push Docker Image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building image for repository: $ECR_REGISTRY/$ECR_REPOSITORY"
          # Build the docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./application
          # Push the primary tag
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Also tag as 'latest' for the service to automatically pick up
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Force New ECS Deployment
        if: github.ref == 'refs/heads/main' # Only deploy on merges to main
        run: |
          echo "Forcing new deployment of service ${{ env.ECS_SERVICE_NAME }} in cluster ${{ env.ECS_CLUSTER_NAME }}..."
          aws ecs update-service --cluster ${{ env.ECS_CLUSTER_NAME }} --service ${{ env.ECS_SERVICE_NAME }} --force-new-deployment
          echo "Deployment initiated."